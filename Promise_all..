Promise.all, Promise.race, and Promise.any are methods provided by JavaScript's Promise object for handling multiple promises. Here's a brief overview of each:

Promise.all:
Promise.all takes an array of promises as input and returns a single promise.
It resolves when all the input promises have resolved, or it rejects as soon as one of the input promises rejects.
If all promises fulfill successfully, Promise.all resolves with an array of their respective fulfillment values.
If any of the input promises rejects, Promise.all immediately rejects with the reason of the first rejected promise.
Example:
javascript
Copy code
const promise1 = Promise.resolve(1);
const promise2 = new Promise((resolve) => setTimeout(() => resolve(2), 1000));
const promise3 = Promise.reject(new Error('Rejected'));

Promise.all([promise1, promise2, promise3])
  .then(values => console.log(values))
  .catch(error => console.error(error.message)); // Output: Error: Rejected
Promise.race:
Promise.race takes an array of promises as input and returns a single promise.
It resolves or rejects as soon as one of the input promises resolves or rejects.
The result (fulfillment value or rejection reason) of the first settled promise (resolved or rejected) becomes the result of the Promise.race.
Example:
javascript
Copy code
const promise1 = new Promise((resolve) => setTimeout(() => resolve(1), 1000));
const promise2 = new Promise((resolve) => setTimeout(() => resolve(2), 500));

Promise.race([promise1, promise2])
  .then(value => console.log(value)); // Output: 2 (since promise2 resolves first)
Promise.any (Introduced in ES2021):
Promise.any takes an array of promises as input and returns a single promise.
It resolves as soon as any of the input promises fulfill (resolve).
If all input promises reject, Promise.any rejects with an AggregateError containing the reasons of all the rejections.
Example:
javascript
Copy code
const promise1 = new Promise((resolve, reject) => setTimeout(() => reject('Promise 1 rejected'), 1000));
const promise2 = Promise.reject('Promise 2 rejected');
const promise3 = new Promise((resolve) => setTimeout(() => resolve(3), 500));

Promise.any([promise1, promise2, promise3])
  .then(value => console.log(value))
  .catch(errors => console.error(errors)); // Output: 3 (since promise3 fulfills first)
These methods provide powerful ways to work with multiple asynchronous operations, allowing you to handle scenarios where you need to wait for multiple promises to complete or react as soon as one of them settles.
