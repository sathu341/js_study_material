JavaScript Callback Functions
What is a Callback Function?
A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.

Why Use Callbacks?
Callbacks are used to ensure that a function is not going to run before a task is completed but will run right after the task has completed. It helps in asynchronous programming, allowing functions to run after something else has happened.

How to Define and Use Callback Functions:

Defining a Callback Function:
A callback function can be defined like any other function but is usually passed as an argument to another function.

Using Callback Functions:
When you pass a callback function as an argument, you do not use parentheses. You only use parentheses when you call the function.

Example 1: Synchronous Callback

javascript
Copy code
function greet(name, callback) {
    console.log('Hello ' + name);
    callback();
}

function sayGoodbye() {
    console.log('Goodbye!');
}

greet('John', sayGoodbye);
Explanation:

greet is a function that takes a name and a callback function.
sayGoodbye is a callback function that will be executed after the greeting.
Example 2: Asynchronous Callback with setTimeout

javascript
Copy code
function fetchData(callback) {
    setTimeout(function() {
        console.log('Data fetched from server');
        callback();
    }, 2000);
}

function processData() {
    console.log('Processing data...');
}

fetchData(processData);
Explanation:

fetchData simulates fetching data from a server and takes a callback function.
setTimeout is used to mimic an asynchronous operation.
processData is called once the data fetching is "complete".
Example 3: Callback in Array Methods

JavaScript's array methods like map, filter, and forEach often use callbacks.

javascript
Copy code
const numbers = [1, 2, 3, 4, 5];

const doubled = numbers.map(function(num) {
    return num * 2;
});

console.log(doubled); // [2, 4, 6, 8, 10]
Explanation:

The map method iterates over each element in the array and applies the callback function to it, creating a new array with the returned values.
Handling Errors in Callbacks:

When dealing with asynchronous operations, it's important to handle errors appropriately.

javascript
Copy code
function fetchData(callback) {
    setTimeout(function() {
        let error = false; // Change this to true to simulate an error
        if (error) {
            callback('Error fetching data', null);
        } else {
            callback(null, 'Data fetched successfully');
        }
    }, 2000);
}

function processData(error, data) {
    if (error) {
        console.error(error);
    } else {
        console.log(data);
    }
}

fetchData(processData);
Explanation:

The callback function processData takes two arguments: error and data.
Depending on whether an error occurred, it handles the error or processes the data.
By understanding and utilizing callback functions, you can handle both synchronous and asynchronous operations more effectively in JavaScript.
